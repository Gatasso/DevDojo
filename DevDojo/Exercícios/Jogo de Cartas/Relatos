Relatos JogoCarta

Desenvolva um jogo de cartas que envolva os seguintes elementos:

Carta: Classe que representa uma carta com valor e naipe.
Baralho: Classe que cria e embaralha um baralho de cartas.
Jogador: Classe que representa um jogador, capaz de receber e jogar cartas.
Jogo: Classe principal que orquestra o jogo, distribuindo cartas aos jogadores.

Carta e Baralho: Associação unidirecional, onde um baralho é composto por cartas.
Jogador e Carta: Associação bidirecional, onde um jogador pode ter cartas, e uma carta pertence a um jogador.
Jogo e Baralho: Associação unidirecional, onde o jogo precisa de um baralho para ser jogado.

Minha ideia é criar um ENUM para tipos de carta e um ENUM para naipes;
A classe "Card" recebe no seu construtor um tipo de carta e um naipe;
A classe Baralho será uma matriz de cartas, havendo uma unica carta com 4 naipes diferentes;
	*tive muita dificuldade na execução dessa classe, principalmente na criação da matriz, percorrer ela e atribuir a carta criada ao devido local na matriz;
	*para resolver, criei um atributo do tipo "Card[]" nomeado "deck", ou seja, uma matriz unidimensional de nome deck. No construtor há um método chamado create(), declarado mais embaixo, destinado a criar um baralho sempre que o jogo começar. Dentro do método, atribuí uma matriz unidimensional multiplicando a quantidade de naipes pela quantidade de cartas do baralho com o método "value().length" à variável "deck" que já é uma matriz unidimensional para ter um valor exato das cartas;
	*criei também uma variavel local "index = 0" para alocar cada carta criada ao baralho "deck"; 
	*aninhei dois laços de repetição foreach iterando uma variável "typeCard" do tipo "TypeCard" à quantidade de itens desse enum ".values()", igualmente à "suit" do tipo "TypeSuit" para obter os nipes de cada carta, o comportamento para cada iteração é criar uma nova carta "Card newCard = new Card(typeCard,suit)" e adicioná-la dentro da matriz "deck[index]" pela posição do index que é incrementado nas iterações.
Ainda nessa classe haverá um método de criação do baralho e um método de embaralhamento de cartas;
	*o método de criação das cartas foi bem tranquilo, inicializei um objeto "deck"referenciado na classe Card, uma vez que dentro de um baralho, só existem cartaas, portanto, precisamos associar um único baralho, as várias cartas. Para a criação das cartas, cada uma recebe um valor e cada valor possue 4 naipes, portanto, percorri laços foreach aninhados incrementando uma variável index para alocar nas posições corretas dentro da matriz baralho e criando um novo objeto carta recebendo o valor e tipo como construtor: "Card newCard = new Card(typeCard, suit);"	
	*minha ideia inicial era desenvolver um embaralhamento próprio, mas lembrei do professor comentando que não precisamos inventar a roda novamente e parti para pesquisar métodos de embaralhamento já validados, e me deparei com a biblioteca java util Random que possui diversos algoritmos para aleatorizar processos, e percebi que sua implementação não é dificil, e decidi usá-la.
Para implementar basta criar um objeto Random(): "Random xxxx = new Random();" e usar o método nextInt para aleatorizar um numero inteiro, que utilizei para acessar o index da matriz do baralho ja criada: "randomCard = randomSequence.nextInt(deck.length);". 
	*entretanto tive muita dificuldade para comparar e filtrar cartas que já haviam sido "sorteadas" para adicionar num novo baralho embaralhado. Minha principal dificuldade foi a de rejeitar e repetir um sorteio quando uma carta ja embaralhada e atribuída ao "shuffledDeck" era sorteada novamente. As comparações que estava fazendo até identificavam se a carta era repetida, mas não consegui implementar uma maneira de descartar essa carta e sortear outra, então, parti para pesquisar e tentar ter novas idéias. Minha conclusão para esse problema foi, sortear a carta dentro de um laço doWhile com a condição do laço ser o retorno de um método "verifyShuffle" que verifica por um if se a posição atual do shuffledDeck não é nula E se a mesma é igual a  carta do baralho original na posição sorteada:
	"if (shuffledDeck[i] != null && deck[randomCard].equals(shuffledDeck[i]))"; retornando falso se a condição se confirmar e forçando o método shuffle à sortear mais uma carta.
	
	*tive uma dificuldade consideravel ao montar o deck inicial dos jogadores, obtive mtos erros durante os testes por não estar criando objetos para usar na lógica, obtive muitos nullpointers por isso, mas a ideia inicial não passou longe da final. Refiz o construtor de "Player" inserindo o modo de jogo ns criação do objeto para poder usar o enum do jogo em questao e seus atributos na lógica, como por exemplo a quantidade de jogadores e a quantidade de cartas  iniciais. troquei  a forma como estava associando as cartas iniciais ao jogador de método para setter, recebendo parametros(carta embaralhada e index) da classe Game através de um método chamado em seu construtor, que percorre com um foreach a quantidade de players e envia a carta embaralhada até atingir a quantidade de cartas iniciais. No geral ainda estou me confundindo bastante com os objetos criados, forma como associo as classes e um pouco de lógica, mas consegui resolver essa parte sem consultar nada mais do que conhecimento prévio e anotações.
	
