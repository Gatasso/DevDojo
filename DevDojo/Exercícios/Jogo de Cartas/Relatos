Relatos JogoCarta

Desenvolva um jogo de cartas que envolva os seguintes elementos:

Carta: Classe que representa uma carta com valor e naipe.
Baralho: Classe que cria e embaralha um baralho de cartas.
Jogador: Classe que representa um jogador, capaz de receber e jogar cartas.
Jogo: Classe principal que orquestra o jogo, distribuindo cartas aos jogadores.

Carta e Baralho: Associação unidirecional, onde um baralho é composto por cartas.
Jogador e Carta: Associação bidirecional, onde um jogador pode ter cartas, e uma carta pertence a um jogador.
Jogo e Baralho: Associação unidirecional, onde o jogo precisa de um baralho para ser jogado.

Minha ideia é criar um ENUM para tipos de carta e um ENUM para naipes;
A classe "Card" recebe no seu construtor um tipo de carta e um naipe;
A classe Baralho será uma matriz de cartas, havendo uma unica carta com 4 naipes diferentes;
	*tive muita dificuldade na execução dessa classe, principalmente na criação da matriz, percorrer ela e atribuir a carta criada ao devido local na matriz;
	*para resolver, criei um atributo do tipo "Card[]" nomeado "deck", ou seja, uma matriz unidimensional de nome deck. No construtor há um método chamado create(), declarado mais embaixo, destinado a criar um baralho sempre que o jogo começar. Dentro do método, atribuí uma matriz unidimensional multiplicando a quantidade de naipes pela quantidade de cartas do baralho com o método "value().length" à variável "deck" que já é uma matriz unidimensional para ter um valor exato das cartas;
	*criei também uma variavel local "index = 0" para alocar cada carta criada ao baralho "deck"; 
	*aninhei dois laços de repetição foreach iterando uma variável "typeCard" do tipo "TypeCard" à quantidade de itens desse enum ".values()", igualmente à "suit" do tipo "TypeSuit" para obter os nipes de cada carta, o comportamento para cada iteração é criar uma nova carta "Card newCard = new Card(typeCard,suit)" e adicioná-la dentro da matriz "deck[index]" pela posição do index que é incrementado nas iterações.
	
	
