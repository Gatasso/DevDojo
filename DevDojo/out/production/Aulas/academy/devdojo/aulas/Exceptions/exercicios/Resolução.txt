1-)
  -Divisão por zero ---> Unchecked
  -Abertura de um arquivo inexistente ---> Checked
  -Conversão de uma String para um número inteiro ---> Unchecked

2-)
a)  public static void main(String[] args) {
        System.out.println(division(1,0));
    }
    public static int division(int a, int b){
        try {
            return a/b;
        } catch (ArithmeticException e){
            System.out.println("Não pode se dividir por 0");
            e.printStackTrace();
        } return 0;
    }

b)    public static void main(String[] args) {
          createFile();
      }
      public static void createFile(){
          File file = new File("Arquivo/newFile.txt");
          try {
              file.createNewFile();
              System.out.println("Arquivo criado com sucesso: " + file);
          }catch (IOException e){
              e.printStackTrace();
              System.out.println("Arquivo não criado");
          }
      }
  }

3-)
a)  public static void main(String[] args) {
     getIdade(101);
    }
    public static void getIdade(int age){
        if (age < 0 || age >= 100){
            throw new IllegalArgumentException("Idade inválida");
        }
        System.out.println("Idade válida");
    }
}

b)    public static void main(String[] args)throws IOException {
              createFile();
      }
          public static void createFile()throws IOException{
          File file = new File("Arquivo/newFile2.txt");
          file.createNewFile();
          System.out.println("Arquivo criado com sucesso em: " + file.getPath());
      }
  }

4-)
Checked Exceptions - IOException // FileNotFoundException
Unchecked Exceptions - ArithmeticException // OutOfBoundsException // NullPointer

5-)
    public static void main(String[] args) {
        int[] pair = {2, 4, 6, 8, 0};
        int[] odd = {1, 3, 5, 7, 9};
        pairOrOdd(pair, odd);
    }
    public static void pairOrOdd(int[] pair, int[] odd) {
        int[] pairAndOdd = new int[5];
        try {
                for (int i = 0; i < odd.length; i++) {
                    pairAndOdd[i] =  odd[i] / pair[i];
                }

            for (int i = 0; i < pairAndOdd.length; i++) {
                System.out.println(pairAndOdd[i]);
            }
        } catch (ArithmeticException e) {
            e.printStackTrace();
            System.out.println("Division could not be done. Math error.");
        } catch (ArrayIndexOutOfBoundsException e) {
            e.printStackTrace();
            System.out.println("Out of bounds. More arguments than expected.");
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
            System.out.println("Invalid argument. Only numbers acceptable");
        }
    }
}

6-)
Stack é uma área da memória destinada a guardar o fluxo da aplicação. Quando um método ou uma função é chamada, esse espaço
na memória começa a guardar quem o chamou, parametros passados, variáveis usadas e os retornos dos métodos. Quando o método
ou função chega ao fim, ele é removido da Stack e o fluxo continua até o fim da execução.
Entretanto, caso o uso de memória dessa stack seja demasiadamente grande, ou infinito usando metodos recursivos(métodos que
se chama) ocorre o StackOverFLow, que seria, basicamente, o estouro da Stack e a JVM lança um erro.

7-)
public static void main(String[] args) {
        try {
            createFile();
        }catch (IOException e){
            e.printStackTrace();
            System.out.println("Arquivo não criado");
        }
    }
    public static void createFile()throws IOException{
        File file = new File("Arquivo/newFile2.txt");
        file.createNewFile();
        System.out.println("Arquivo criado com sucesso em: " + file.getPath());
    }
}

8-)
    public static void main(String[] args) {
          System.out.println(checkNumbers(10,0,5));
      }
      public static int checkNumbers(int a, int b, int c) {
          if (a == 0 || b == 5 || c == 10){
              throw new RuntimeException("Invalid Number");
          } return a+b+c;
      }
    }

9-) Usa-se o bloco try-catch, geralmente, em métodos que são privados, pois, assim, o tratamento das Exceções é feito
dentro do próprio método, uma vez que métodos privados só podem ser invocados na classe que pertencem.
Já os lançamentos de Exceptions tendem a estar presentes em métodos public, ou em métodos mais genéricos que podem ser
aproveitados em diversas outras classes. Assim, seu tratamento não fica restrito, e cada classe pode tratar da forma que
achar adequado.
Entretanto, é importante salientar que essa questão deve estar à par da regra de negócios da aplicação, e que ambas as
formas são flexíveis e irrestritas quanto à sua implementação. Sendo assim, cada projeto pode usar de formas diferentes.
