Desafio 1:
public class Library {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Book book1 = new Book("Estoic Diary", "001");
        Book book2 = new Book("Dom Casmurro", "002");
        Book book3 = new Book("Clockwork Orange", "003");
        Book book4 = new Book("Animal Farm ", "004");
        Book[] collection = {book1,book2,book3,book4};
        try {
            System.out.println("What book are you looking for? Enter the name:");
            String bookName = scanner.nextLine();
            rentBook(bookName,collection);
        } catch (BookNotFoundException e) {
            e.printStackTrace();
        }
    }
    public static Book rentBook(String userWishBook,Book[]collection) throws BookNotFoundException{
        for (Book book : collection) {
            if (userWishBook.equals(book.getName())){
                System.out.println("The book " + book.getName() + " is now rented for 7 days." );
                return book;
            } throw new BookNotFoundException();
        } return null;
    }
}
----------------------------------------------------Exception-----------------------------------------------------------
public class BookNotFoundException extends Exception {
    public BookNotFoundException() {
        super("Livro n√£o cadastrado na biblioteca");
    }

    public BookNotFoundException(String message) {
        super(message);
    }
}

***********************************************************************************************************************
***********************************************************************************************************************
Desafio 2:
public class GameInterface {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        try {
            System.out.println("Bem vindo ao MGRGAME");
            System.out.println("Nos informe seu nome e sua idade para continuar:");
            String name = scanner.nextLine();
            int age = scanner.nextInt();
            checkAge(age);
        } catch (UnderAgeException e){
            e.printStackTrace();
        }
    }
    private static boolean checkAge(int age)throws UnderAgeException {
        if (age < 13) throw new UnderAgeException();
        else return true;
    }
}
----------------------------------------------------Exception-----------------------------------------------------------
public class UnderAgeException extends Exception{
    public UnderAgeException() {
        super("You must have 13 years old to play this game");
    }
}

***********************************************************************************************************************
***********************************************************************************************************************
Desafio 3:
public class BankApp {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Account acc01 = new Account("JayJay");
        System.out.println("Which operation would you like to do today?");
        System.out.println("1-Transfer // // 2-Payment");
        int choose = scanner.nextInt();
        switch (choose) {
            case 1:
                acc01.transfer(scanner);
                break;
            case 2:
                acc01.payment(scanner);
                break;
        }
    }
}
----------------------------------------- // -------------------------- // ---------------------------------------------
public class Account implements Operations {
    private Budget budget;
    private String name;

    public Account(String name) {
        this.name = name;
        this.budget = new Budget();
    }

    @Override
    public void transfer(Scanner scanner) {
        boolean isExecuted = false;
        while (!isExecuted) {
            System.out.println("Transfer Value");
            double value = scanner.nextDouble();
            try {
                budget.transfer(value);
                System.out.println("Transfer Done");
                System.out.println(getName() + ",your budget is now: " + budget.getBudget());
                isExecuted = true;
            } catch (NotBudgetEnoughException e) {
                e.printStackTrace();
                System.out.println("The transfer couldnt be done. Try Again");
            }
        }
    }

    @Override
    public void payment(Scanner scanner) {
        boolean isPaid = false;
        while (!isPaid) {
        System.out.println("Payment Value:");
        double value = scanner.nextDouble();
            try {
                budget.transfer(value);
                System.out.println("Payment done");
                System.out.println(getName() + ",your budget is now: " + budget.getBudget());
                isPaid = true;
            } catch (NotBudgetEnoughException e) {
                e.printStackTrace();
                System.out.println("Payment couldnt be done. Check the value");
            }
        }
    }

    public String getName() {
        return name;
    }
}
----------------------------------------- // -------------------------- // ---------------------------------------------
public interface Operations {
    void transfer(Scanner scanner);
    void payment(Scanner scanner);
}
----------------------------------------- // -------------------------- // ---------------------------------------------
public class Budget {
    private double budget;
    private final double INITIAL_BUDGET = 1000;

    public Budget() {
        this.budget = INITIAL_BUDGET;
    }
    public double transfer(double amount) throws NotBudgetEnoughException{
        if (amount > this.budget){
            throw new NotBudgetEnoughException();
        } else{
            this.budget -= amount;
            return this.budget;
        }
    }

    public double getBudget() {
        return budget;
    }
}
----------------------------------------------------Exception-----------------------------------------------------------
public class NotBudgetEnoughException extends Exception{
    public NotBudgetEnoughException() {
        super("You dont have budget enough to complete the transaction");
    }

    public NotBudgetEnoughException(String message) {
        super(message);
    }
}

***********************************************************************************************************************
***********************************************************************************************************************
Desafio 4:
public class PlaneInterface {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Plane plane = new Plane(3, 10, 3);
        try {
            System.out.println("Choose the seat on the plane");
            String choice = scanner.nextLine();
            Seat chosenSeat = plane.findSeat(choice);
            setSeatReservation(chosenSeat);
        }catch (UnavailableSeatException e){
            e.printStackTrace();
            System.out.println("Unavailable Seat. Please choose another one");
        }
    }
    private static void setSeatReservation(Seat chosenSeat) throws UnavailableSeatException{
        if(chosenSeat.isOccupied()) {
            throw new UnavailableSeatException();
        }else {
            System.out.println("Reservation confirmed on " + chosenSeat);
            chosenSeat.setOccupied(true);
        }
    }
}
----------------------------------------- // -------------------------- // ---------------------------------------------
public class Plane {
    public Seat[] seatPosition;
    private int column, lines, aisle;
    private final int MAX_CAPACITY;

    public Plane(int column, int lines, int aisle) {
        this.column = column;
        this.lines = lines;
        this.aisle = aisle;
        this.MAX_CAPACITY = (this.column * this.lines * this.aisle);
        this.seatPosition = new Seat[this.MAX_CAPACITY];
        createSeats();
    }

    private void createSeats() {
        int x = 0;
        char row = 'A';
        for (int i = 0; i < this.lines; i++) {
            for (int j = 0; j <= this.aisle; j++) {
                for (int k = 0; k <= this.column; k++) {
                    if (x < MAX_CAPACITY) {
                        this.seatPosition[x] = new Seat(row, k + 1);
                        x++;
                    }
                }
                row++;
            }
        }
    }
    public Seat findSeat(String seatName){
        for (Seat seat : seatPosition) {
            if (seat!=null && seatName.equals(seat.toString())){
                return seat;
            }
        } return null;
    }
}
----------------------------------------- // -------------------------- // ---------------------------------------------
public class Seat {
    private boolean isOccupied;
    private char row;
    private int column;

    public Seat(char a, int b) {
        this.isOccupied = false;
        this.row = a;
        this.column = b;
    }

    @Override
    public String toString() {
        return "Seat " + row + column;
    }

    public boolean isOccupied() {
        return isOccupied;
    }

    public void setOccupied(boolean occupied) {
        isOccupied = occupied;
    }
}
----------------------------------------------------Exception-----------------------------------------------------------
public class UnavailableSeatException extends Exception{
    public UnavailableSeatException() {
        super("This seat is already occupied");
    }

    public UnavailableSeatException(String message) {
        super(message);
    }
}
***********************************************************************************************************************
***********************************************************************************************************************
Desafio 5:
public class ShopApp {
    public static void main(String[] args) {
        Product keyboard = new Product("Keyboard",5);
        Product mouse = new Product("Mouse",10);
        Product mousePad = new Product("MousePad",7);
        Product nullProduct = null;
        ShoppingCart yourShoppingCart= new ShoppingCart();
        System.out.println(keyboard);
        System.out.println(mouse);
        System.out.println(mousePad);
        System.out.println("-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_");
        try {
            yourShoppingCart.addCart(keyboard, 5);
            System.out.println("Added to your cart");
            System.out.println(keyboard);
            System.out.println("-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_");
            yourShoppingCart.addCart(mouse, 5);
            System.out.println("Added to your cart");
            System.out.println(mouse);
            System.out.println("-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_");
            yourShoppingCart.addCart(mousePad, 5);
            System.out.println("Added to your cart");
            System.out.println(mousePad);
            System.out.println("-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_");
            yourShoppingCart.addCart(nullProduct,1);
        }catch (OutOfStorageException e){
            e.printStackTrace();
            System.out.println("Quantity not available on stock");
        } catch (ProductDontExistException e){
            e.printStackTrace();
            System.out.println("Product not available on our catalogue");
        }
    }
}
----------------------------------------- // -------------------------- // ---------------------------------------------
public class Product {
    private final String name;
    private int quantity;

    public Product(String name, int initialQuantity) {
        this.name = name;
        this.quantity = initialQuantity;
    }

    public void removeItems(int quantityOnCart)throws OutOfStorageException{
        if (quantityOnCart > this.quantity){
            throw new OutOfStorageException();
        }else {
            this.quantity -= quantityOnCart;
        }
    }

    @Override
    public String toString() {
        return "There is " + quantity +" " + name + " available";
    }
}
----------------------------------------- // -------------------------- // ---------------------------------------------
public class ShoppingCart {
    private Product[] products;
    private int size;

    public ShoppingCart() {
        int INITIAL_SIZE = 5;
        products = new Product[INITIAL_SIZE];
        size = 0;
    }

    public void addCart(Product product, int quantity) throws OutOfStorageException, ProductDontExistException {
        if (product == null) {
            throw new ProductDontExistException();
        } else {
            products[size] = product;
            product.removeItems(quantity);
            size++;
            if (size == products.length) {
                increaseCapacity();
            }
        }
    }

    private void increaseCapacity() {
        int newCapacity = products.length * 2;
        products = Arrays.copyOf(products, newCapacity);
    }
}
----------------------------------------------------Exception-----------------------------------------------------------
public class OutOfStorageException extends Exception{
    public OutOfStorageException() {
        super("This product is not available on this Quantity");
    }
}
----------------------------------------------------Exception-----------------------------------------------------------
public class ProductDontExistException extends Exception{
    public ProductDontExistException() {
        super("This product dont exists");
    }
}
***********************************************************************************************************************
***********************************************************************************************************************
Desafio 6: Desenvolve ao aprender a mexer com data.

***********************************************************************************************************************
***********************************************************************************************************************
Desafio 7:
